import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { collection, addDoc, getDocs, doc, setDoc, updateDoc, arrayUnion, arrayRemove } from "firebase/firestore";
import { db } from "../firebaseConfig";
import React, { useState, useEffect } from "react";
import { getFunctions, httpsCallable } from "firebase/functions";
const functions = getFunctions();
import {getAuth} from 'firebase/auth'
import { useAuthState } from "react-firebase-hooks/auth";

export default function Home({ links, ids }) {
  console.log(`users are ${JSON.stringify(links)}`);
    const auth = getAuth();
    const [user, loading, error] = useAuthState(auth);

  const sayHello = () => {
    const lovedRef = doc(db, "users", user.uid);
    return updateDoc(lovedRef, { favorites: arrayUnion("TestID") });
    // const hello = httpsCallable(functions, "addFavorites");
    // hello({ name: 'michael' }).then((res) => {
    //   console.log(res);
    // });
    // console.log(hello);
  };

    const sayGoodbye= () => {
      const lovedRef = doc(db, "users", user.uid);
      return updateDoc(lovedRef, { favorites: arrayRemove("TestID") });
      // const hello = httpsCallable(functions, "addFavorites");
      // hello({ name: 'michael' }).then((res) => {
      //   console.log(res);
      // });
      // console.log(hello);
    };



  async function sampleData() {
    try {
      const docRef = await addDoc(collection(db, "users"), {
        first: "Ada",
        last: "Lovelace",
        born: 1815,
      });
      console.log("Document written with ID: ", docRef.id);
    } catch (e) {
      console.error("Error adding document: ", e);
    }
  }

  useEffect(() => {
    // sampleData();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {links ? (
        <main className={styles.main}>
          <h1>
            <ul>
              {links.map((x) => (
                <li key={x._id}>
                  <Image
                    src={x.img}
                    alt={`${x.name} website preview`}
                    loading="lazy"
                    width={250}
                    height={250}
                  />

                  <p>
                    <a href={`/links/${x._id}`}>{`${x.name}`}</a>
                  </p>
                  <p>{x.description}</p>
                  <p>{x.loved}</p>
                </li>
              ))}
            </ul>
          </h1>

          <p className={styles.description}>
            <a href="/about">about</a>
            <code className={styles.code}>pages/index.js</code>
          </p>
          <button onClick={() => sayHello()}>hello</button>
          <button onClick={() => sayGoodbye()}>Goodbye</button>
        </main>
      ) : (
        <p>loading</p>
      )}
      <footer className={styles.footer}></footer>
    </div>
  );
}

export async function getStaticProps() {
  let links = [];

  const querySnapshot = await getDocs(collection(db, "links"));
  querySnapshot.forEach((doc) => {
    console.log(`${doc.id} => ${doc.data().name}`);
    links.push({
      name: doc.data().name,
      _id: doc.id,
      description: doc.data().description,
      img: doc.data().img,
      loved: doc.data().loved,
    });
  });

  return {
    props: {
      links,
    },
  };
}
